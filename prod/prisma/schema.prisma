// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  relationMode      = "prisma"
}

generator js {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

model Event {
  id          Int      @id @default(autoincrement())
  name        String
  description String?  @db.Text
  location    String?
  date        DateTime

  divisions Division[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Division {
  id           String @id @default(cuid())
  name         String
  teamEntryFee Float?
  teamSize     Int
  maxTeams     Int

  eventId Int
  event   Event  @relation(fields: [eventId], references: [id])
  teams   Team[]

  @@index([eventId])
}

model Team {
  id     String  @id @default(cuid())
  guests String?

  divisionId String
  division   Division   @relation(fields: [divisionId], references: [id])
  teamUsers  TeamUser[]

  @@index([divisionId])
}

model TeamUser {
  team   Team   @relation(fields: [teamId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  teamId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  @@id([teamId, userId])
  @@index([userId])
  @@index([teamId])
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? //@db.Text
  access_token      String? //@db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? //@db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String     @id @default(cuid())
  name          String
  username      String     @unique
  email         String     @unique
  emailVerified DateTime?
  reservedEmail String?    @unique
  image         String?
  accounts      Account[]
  sessions      Session[]
  teamUsers     TeamUser[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
